/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define constant DONATOR_MAP = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(balanceOf) eq balanceOf jumpi

    dup1 __FUNC_SIG(withdraw) eq withdraw jumpi

    FALLBACK()

    balanceOf:
        BALANCE_OF()

    withdraw:
        WITHDRAW()
}

#define macro FALLBACK() = takes(0) returns(0) {

    caller GET_LOCATION()

    dup1 sload

    callvalue add

    swap1 sstore
}

#define macro BALANCE_OF() = takes(0) returns(0) {
    
    // arg1
    0x04 calldataload

    GET_LOCATION() sload

    0x00 mstore

    0x20 0x00 return
}

#define macro WITHDRAW() = takes(0) returns(0) {
    
    caller

    GET_LOCATION() sload

    // arg1
    0x04 calldataload    // [withdraw_amount, balance]

    // withdraw_amount > balance ?
    dup2 dup2 gt error jumpi

    // balance - withdraw_amount 
    dup1 dup3 sub

    caller GET_LOCATION() sstore

    0x00 0x00 0x00 0x00  // [0, 0, 0, 0, withdraw_amount, balance]

    // send value
    dup5

    // destination address
    caller

    // gas
    gas             // [gas, addr, val, 0, 0, 0, 0, withdraw_amount, balance]

    call

    0x20 0x00 return

    error:
        0x20 0x00 revert

}

#define macro GET_LOCATION() = takes(1) returns(1) {

    // put arg1 in memory 
    0x00 mstore

    [DONATOR_MAP] 0x20 mstore

    0x40 0x00 sha3
}