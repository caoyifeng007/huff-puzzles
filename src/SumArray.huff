
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload 0xe0 shr

    __FUNC_SIG(sumArray) eq sumArray jumpi

    0x20 0x00 revert

    sumArray:
        SUM_ARRAY()

}

#define macro SUM_ARRAY() = takes(0) returns(0) {

    0x24 calldataload

    dup1 0x00 eq zero_length jumpi

    0x00 // sum

    0x00 // i

    loop:

        // i * 0x20
        dup1 0x20 mul 
        // 0x44 + i * 0x20
        0x44 add 
        // load arr[i]
        calldataload

        // sum += arr[i]
        swap1 swap2 add

        // i++
        swap1 0x01 add

        // i == len, break loop
        dup1 dup4 eq end jumpi

        loop jump


    zero_length:
        0x00 0x00 mstore
        0x20 0x00 return
    
    end:
        swap1 0x00 mstore
        0x20 0x00 return

        
}