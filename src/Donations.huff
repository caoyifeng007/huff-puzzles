/** 
 *  DONATIONS HUFF EXERCISE
 *  
 *  The task is to Implement solidity's "receive" functionality which allows sending ether to a smart contract without any calldata
 *  also have a getter function that returns how much an address has donated. Addresses can donate several times
 */

#define function donated(address) payable returns(uint256)

#define constant STORAGE_SLOT0 = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {

    0x00 calldataload 0xe0 shr

    __FUNC_SIG(donated) eq donated jumpi

    callvalue receive jumpi

    // fallback
    0x20 0x00 return

    donated:
        DONATED()

    receive:
        GET_LOCATION()

        dup1 sload

        callvalue add

        swap1 sstore

        0x20 0x00 return
}

#define macro DONATED() = takes(0) returns(0) {

    GET_LOCATION()

    sload

    0x00 mstore

    0x20 0x00 return
}

#define macro GET_LOCATION() = takes(0) returns(1) {
    
    caller 0x00 mstore

    [STORAGE_SLOT0] 0x20 mstore

    0x40 0x00 sha3
}